namespace LEA.Test.Mac
{
	public class CMacModeTest
	{
		private readonly TestVectorMac[] lea256CMacTestVectors =
		{
		new TestVectorMac
		{
			Key = new byte[] { 0x3C, 0x61, 0x78, 0x8E, 0x6A, 0xEA, 0xDF, 0x8F, 0x2, 0x8F, 0xEB, 0xC5, 0x99, 0x60, 0xF4, 0x71, 0x7C, 0x47, 0xD1, 0x64, 0x44, 0x48, 0x3, 0x68, 0xAA, 0x8, 0x31, 0xDB, 0x9C, 0x8C, 0xD5, 0x9D },
			Data = Array.Empty<byte>(),
			Mac = new byte[] { 0x7C, 0x4E, 0x55, 0xE5, 0xB0, 0x2B, 0x19, 0x61, 0xC9, 0x4B, 0xCC, 0x88, 0xF4, 0x4B, 0xB3, 0x31 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0x90, 0x44, 0x34, 0x2D, 0x18, 0x48, 0x93, 0xE, 0xB6, 0xE1, 0xA8, 0x70, 0xF2, 0x4B, 0x4F, 0xC, 0xAB, 0xB9, 0x7E, 0x50, 0xAB, 0x9A, 0x7B, 0xBC, 0x7E, 0x1B, 0x4C, 0x8C, 0x83, 0xED, 0x70, 0x97 },
			Data = new byte[] { 0x43, 0x48, 0xCC, 0x77, 0x2, 0x30, 0xE8, 0xEA },
			Mac = new byte[] { 0x70, 0x74, 0x77, 0x30, 0x17, 0xEF, 0xFD, 0x96, 0x48, 0x13, 0x46, 0xB5, 0x16, 0x4C, 0x3B, 0xE5 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0x94, 0xF7, 0x5B, 0x78, 0x72, 0x3, 0x84, 0x56, 0xD, 0xD1, 0x7B, 0x8B, 0x62, 0x3A, 0x47, 0x51, 0xCF, 0xF5, 0x52, 0xBE, 0x25, 0x5E, 0x1A, 0xA3, 0xFE, 0x75, 0x28, 0xB5, 0x51, 0x2A, 0x46, 0xEA },
			Data = new byte[] { 0x43, 0xD8, 0xED, 0x26, 0x40, 0xF, 0xFD, 0x17, 0x4B, 0x96, 0xB0, 0x5D, 0x92, 0xB0, 0xD1, 0xEF },
			Mac = new byte[] { 0x2C, 0x98, 0x98, 0x22, 0xD0, 0x49, 0xA4, 0xBE, 0x89, 0x4E, 0x49, 0xC8, 0xF8, 0x4A, 0x7B, 0xDD },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0x46, 0x9F, 0x29, 0xBA, 0xA9, 0x67, 0x3B, 0x8B, 0x69, 0xD4, 0x31, 0x2E, 0x2C, 0xBE, 0x15, 0xD8, 0x6C, 0x8C, 0x44, 0xC2, 0x85, 0xF7, 0x20, 0x17, 0xC, 0x11, 0x6, 0x10, 0x63, 0x85, 0x80, 0x5D },
			Data = new byte[] { 0x8A, 0x20, 0xBB, 0xC8, 0x38, 0x90, 0x3B, 0x15, 0x2B, 0x6C, 0xCD, 0x2C, 0xBC, 0x75, 0xBD, 0x7A, 0xB6, 0x1C, 0x4A, 0x94, 0x68, 0x44, 0x57, 0x1D },
			Mac = new byte[] { 0xBD, 0x77, 0x3, 0xF5, 0xCF, 0xEE, 0x5C, 0xCE, 0x5E, 0x78, 0xAB, 0x5F, 0x4D, 0xDA, 0x3D, 0x49 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0xF9, 0x48, 0x63, 0xEB, 0xFC, 0x40, 0xBB, 0x65, 0x44, 0x80, 0xEE, 0x2F, 0xFA, 0x62, 0x82, 0xA, 0xEC, 0x46, 0xE5, 0xF5, 0x28, 0xD6, 0xA6, 0x98, 0xCA, 0x8F, 0xE5, 0xE3, 0x12, 0x7D, 0x9, 0xF3 },
			Data = new byte[] { 0xBA, 0x45, 0xB1, 0x35, 0x86, 0x69, 0xEC, 0xCD, 0x1C, 0xC8, 0xAC, 0x39, 0x16, 0x64, 0x78, 0x31, 0x56, 0x68, 0x62, 0xD2, 0x99, 0x6A, 0x39, 0xFC, 0x4F, 0xED, 0xFF, 0xF9, 0xAB, 0x2A, 0x9D, 0x5F },
			Mac = new byte[] { 0x9D, 0x85, 0x8B, 0x8B, 0xF4, 0x89, 0x8A, 0xFA, 0x40, 0x68, 0xDA, 0x30, 0x47, 0x52, 0x62, 0xB7 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0xF6, 0x10, 0xD6, 0x37, 0x28, 0x89, 0x7A, 0x5E, 0xB9, 0xFF, 0xDC, 0x2C, 0xB5, 0x1F, 0x85, 0x54, 0xF, 0xDC, 0x2A, 0xB, 0x37, 0xB7, 0xDC, 0x6D, 0xEE, 0x3E, 0x7F, 0x1C, 0x5A, 0xD3, 0x7D, 0x2A },
			Data = new byte[] { 0x55, 0xAF, 0xBC, 0x39, 0xB, 0x27, 0xCD, 0xE0, 0xC4, 0x2D, 0x66, 0x51, 0xFE, 0x19, 0x12, 0x39, 0xBF, 0xAA, 0x27, 0xE8, 0x29, 0x47, 0xF8, 0xB2, 0x4F, 0x8B, 0x4D, 0x95, 0x47, 0x1, 0x10, 0x1C, 0x81, 0x2C, 0x49, 0x82, 0x56, 0xCB, 0x4D, 0x1B },
			Mac = new byte[] { 0x9E, 0x53, 0x28, 0xA9, 0x20, 0x6D, 0x8D, 0x46, 0x46, 0xBD, 0xE5, 0x9D, 0x53, 0xFE, 0x3A, 0x84 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0xE4, 0x5A, 0x31, 0xF0, 0x1A, 0xDC, 0x85, 0xA9, 0xF, 0xD8, 0x3F, 0xB1, 0x98, 0xA2, 0xF6, 0x94, 0x19, 0xDB, 0x51, 0xAC, 0x9B, 0x3B, 0xBE, 0xFC, 0x1F, 0x8E, 0x67, 0x5C, 0x32, 0xFD, 0x62, 0xD7 },
			Data = new byte[] { 0xC2, 0x8F, 0x27, 0x51, 0x30, 0xF0, 0x48, 0x6C, 0xA6, 0x70, 0x5C, 0xAD, 0xAB, 0x4E, 0x3C, 0xDB, 0xF5, 0x37, 0x73, 0xA8, 0x7E, 0xA, 0xEF, 0x94, 0xDA, 0xDE, 0xFD, 0xD, 0xC7, 0x46, 0x74, 0xDB, 0x6, 0xD4, 0x2F, 0xBB, 0x69, 0xDB, 0xC1, 0x4A, 0x2E, 0x79, 0x65, 0x25, 0x8B, 0xD5, 0x34, 0x4F },
			Mac = new byte[] { 0x8B, 0x6E, 0x26, 0x2E, 0x85, 0xA7, 0xB7, 0x2D, 0xE3, 0xB9, 0x93, 0x79, 0x56, 0xB6, 0xD2, 0x63 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0x8A, 0xA6, 0x9B, 0xD3, 0x17, 0xF5, 0xB, 0xAA, 0x57, 0x23, 0xF2, 0xDE, 0x3C, 0x2D, 0xEB, 0xF0, 0x57, 0x2F, 0x31, 0x78, 0xED, 0x27, 0x5A, 0xB, 0x4C, 0xFC, 0x42, 0x61, 0x5F, 0xBF, 0x45, 0xB7 },
			Data = new byte[] { 0x81, 0x30, 0xB1, 0x73, 0x8F, 0x84, 0x7A, 0x7, 0x41, 0x65, 0x30, 0x17, 0xBA, 0x3B, 0x2F, 0xDE, 0x5D, 0xAA, 0x16, 0xCE, 0xE3, 0x5B, 0x7A, 0x76, 0xAA, 0x0, 0xDB, 0xA9, 0x50, 0x92, 0xD6, 0xDD, 0x81, 0xDD, 0x9D, 0xD1, 0xD, 0x3F, 0xA5, 0x73, 0x3E, 0xAD, 0x9E, 0x0, 0x68, 0xF6, 0xA8, 0x6D, 0xC1, 0x4C, 0xC4, 0x6, 0x73, 0x0, 0x88, 0x55 },
			Mac = new byte[] { 0x7F, 0x9A, 0xE2, 0x4, 0x82, 0x7, 0x60, 0xB8, 0xC3, 0x5F, 0xF3, 0xAA, 0xF7, 0x1B, 0x9D, 0x24 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0xF0, 0x8D, 0x18, 0x45, 0x86, 0xD8, 0x51, 0x87, 0x33, 0xB6, 0x47, 0x35, 0xBA, 0xAF, 0xF2, 0xB5, 0xF6, 0x2, 0x24, 0xE1, 0x6F, 0xE8, 0xBE, 0x64, 0x2B, 0x1D, 0x24, 0x67, 0xC7, 0x9D, 0xEE, 0x6E },
			Data = new byte[] { 0xC6, 0xAB, 0xE1, 0x7C, 0x28, 0x18, 0x1D, 0x7E, 0x3E, 0xC2, 0x97, 0xE6, 0xBE, 0x5B, 0xCA, 0x97, 0x13, 0x6C, 0xAA, 0x1, 0xF6, 0x99, 0xDA, 0x8D, 0x42, 0x26, 0x1E, 0x3B, 0x4, 0xBA, 0x13, 0x89, 0xD2, 0x63, 0x1E, 0x98, 0x5F, 0xDB, 0xA2, 0x8A, 0x4C, 0xA, 0x76, 0x2E, 0x40, 0xCB, 0x96, 0xDF, 0x3A, 0xF3, 0x18, 0xA9, 0x26, 0x90, 0x62, 0xAE, 0xAF, 0x6E, 0x9B, 0xC8, 0x55, 0xE0, 0x5F, 0x70 },
			Mac = new byte[] { 0xE, 0x58, 0x57, 0x34, 0xBA, 0x98, 0xDD, 0xA8, 0x4D, 0xA1, 0x2C, 0xB1, 0xE1, 0x13, 0x2F, 0xA7 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0xBF, 0xBC, 0xB7, 0xDF, 0x52, 0xA8, 0x48, 0x72, 0x2, 0x94, 0xCA, 0x53, 0x68, 0x88, 0xBC, 0x56, 0x15, 0xA0, 0x56, 0x21, 0x27, 0x55, 0xC0, 0x90, 0x1A, 0xFD, 0x81, 0x58, 0xE0, 0x95, 0x3A, 0xEA },
			Data = new byte[] { 0x33, 0xBF, 0x94, 0x9A, 0x2A, 0x7, 0x77, 0x0, 0xA, 0x6A, 0x7D, 0x9E, 0x5F, 0x19, 0xA6, 0xC4, 0x4C, 0x7A, 0x4D, 0xB1, 0x20, 0x70, 0x5A, 0xFB, 0x29, 0xDC, 0xBA, 0x31, 0xCD, 0x64, 0xC, 0xBE, 0xD6, 0x73, 0x9D, 0x10, 0xE, 0x80, 0x97, 0xFA, 0xC, 0x94, 0x75, 0x57, 0x4D, 0x6, 0xBA, 0xF1, 0x87, 0x89, 0xE3, 0xA1, 0x39, 0x6A, 0x9A, 0xB7, 0x87, 0x12, 0x2C, 0x9B, 0x45, 0xD2, 0x3D, 0xB5, 0x52, 0xE0, 0xBB, 0x8B, 0x27, 0x9C, 0x10, 0x29 },
			Mac = new byte[] { 0x16, 0x24, 0xA3, 0x82, 0x6, 0xED, 0x78, 0x46, 0x72, 0x26, 0xFF, 0x90, 0xB9, 0xBD, 0x90, 0x48 },
		}
	};
		private readonly TestVectorMac[] lea192CMacTestVectors =
		{
		new TestVectorMac
		{
			Key = new byte[] { 0xAF, 0xD7, 0x2D, 0xAE, 0xCC, 0xFB, 0x84, 0x99, 0x7A, 0xE9, 0x14, 0x1C, 0x9B, 0xC8, 0xF8, 0x32, 0x52, 0xFB, 0x91, 0xC, 0x17, 0xEE, 0x33, 0xFC },
			Data = Array.Empty<byte>(),
			Mac = new byte[] { 0xB, 0xBD, 0xFE, 0xA3, 0xD9, 0xC0, 0xB1, 0x9F, 0xA7, 0xBE, 0x13, 0x2D, 0xB8, 0x91, 0x10, 0x8F },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0xB, 0xF, 0x1D, 0x91, 0x88, 0x1A, 0xAF, 0x4, 0xFD, 0x9A, 0xD7, 0xD2, 0xF9, 0xAD, 0xCD, 0xAB, 0x85, 0x7, 0x0, 0x8B, 0xB7, 0x39, 0x50, 0x27 },
			Data = new byte[] { 0x84, 0x33, 0x7D, 0x8A, 0xD6, 0x8, 0xDF, 0x0 },
			Mac = new byte[] { 0x17, 0x78, 0x4B, 0xC0, 0x2B, 0xBD, 0xD, 0x1B, 0x22, 0x5D, 0xDB, 0x43, 0xC1, 0x53, 0x36, 0xE0 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0xDE, 0xF2, 0x58, 0x33, 0xAC, 0x96, 0x88, 0x94, 0xFD, 0x89, 0x3F, 0xFC, 0x54, 0x12, 0x38, 0x93, 0x4C, 0x32, 0x4, 0xF2, 0x2C, 0xE1, 0x44, 0x84 },
			Data = new byte[] { 0xBC, 0x9B, 0x1B, 0x32, 0x57, 0x1B, 0xE3, 0x3F, 0x42, 0x67, 0x1F, 0x70, 0x3C, 0xC, 0xB1, 0x71 },
			Mac = new byte[] { 0x16, 0x3E, 0x8A, 0xED, 0x5, 0x23, 0xB, 0xBD, 0xA7, 0x5B, 0x5B, 0x36, 0x98, 0x4E, 0x11, 0x78 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0x56, 0xAB, 0x4E, 0x74, 0x5, 0xB4, 0x2E, 0x1B, 0x76, 0x72, 0x8, 0x98, 0x21, 0x48, 0x3D, 0x13, 0xA1, 0x3A, 0x54, 0x4B, 0xC3, 0xAE, 0xA6, 0x81 },
			Data = new byte[] { 0xDD, 0x74, 0x5A, 0x92, 0x61, 0x5, 0x94, 0x63, 0xB1, 0x8, 0xEA, 0x81, 0x35, 0x1B, 0x18, 0x9, 0xAC, 0xCF, 0xF4, 0xC6, 0xBF, 0xF4, 0xA4, 0x9A },
			Mac = new byte[] { 0xE0, 0x62, 0x4B, 0xBE, 0x87, 0x61, 0x4B, 0xF, 0x91, 0xBD, 0x10, 0xBF, 0x23, 0xA3, 0xBB, 0x5E },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0xDC, 0x18, 0xE, 0x1F, 0x41, 0x4A, 0x90, 0x8D, 0x57, 0x24, 0xF1, 0xDF, 0x42, 0x8, 0x98, 0x31, 0xB6, 0xA9, 0xFC, 0x6D, 0xC, 0xCD, 0x5C, 0x26 },
			Data = new byte[] { 0x95, 0x52, 0xB0, 0xC4, 0x2E, 0x6F, 0xDF, 0xE2, 0x14, 0x3D, 0x32, 0xF4, 0xFA, 0x76, 0x9, 0x2D, 0x59, 0x7C, 0xCD, 0xA0, 0x8, 0x9D, 0x25, 0xA5, 0xC, 0x95, 0x6D, 0x7E, 0xB1, 0x54, 0x64, 0x3A },
			Mac = new byte[] { 0xF5, 0x55, 0xD7, 0xC0, 0xC2, 0xB4, 0x2F, 0xA3, 0x79, 0x63, 0x49, 0x48, 0xF, 0xE3, 0xC5, 0x60 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0xDA, 0x2, 0x24, 0xDA, 0x95, 0x41, 0x58, 0xB3, 0xF2, 0xB2, 0xA9, 0x13, 0x16, 0xBA, 0x79, 0x27, 0x8B, 0x86, 0xD4, 0x1C, 0xDA, 0x4C, 0xA3, 0x85 },
			Data = new byte[] { 0x5C, 0xD4, 0x23, 0xFD, 0x4D, 0x38, 0x96, 0xD, 0x22, 0xE8, 0x39, 0x50, 0x1C, 0xF0, 0x75, 0xD4, 0x1E, 0x7E, 0x59, 0xC4, 0xBC, 0x9E, 0x48, 0x44, 0x94, 0x49, 0xEF, 0x9D, 0xE1, 0x9E, 0x7A, 0x9A, 0x4D, 0x6F, 0x8, 0x32, 0x7, 0xFF, 0x5C, 0x66 },
			Mac = new byte[] { 0x3C, 0x6F, 0x2C, 0xAB, 0x44, 0x97, 0x5, 0x90, 0xDA, 0x8, 0x7F, 0x13, 0x39, 0x7D, 0xF2, 0xB0 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0x16, 0xA, 0xD5, 0x6D, 0xED, 0x6, 0xA0, 0xF, 0x3F, 0xA9, 0x2C, 0x4F, 0x14, 0xAB, 0xDE, 0x4C, 0x1D, 0xCD, 0x7, 0x69, 0x44, 0x1A, 0x13, 0xAC },
			Data = new byte[] { 0x88, 0x6D, 0x3, 0x64, 0x8, 0x33, 0x1D, 0xF, 0x5D, 0x72, 0xE1, 0x7A, 0x2D, 0xB, 0x40, 0x2A, 0xFD, 0x3C, 0x9, 0xFB, 0x47, 0x68, 0xA4, 0x7, 0xCD, 0x1B, 0x2, 0xC9, 0x2C, 0x49, 0xD4, 0x83, 0xB4, 0xD6, 0xFB, 0xDC, 0x77, 0x5B, 0x40, 0xCE, 0xA0, 0x28, 0x46, 0xBF, 0x7, 0x85, 0xBC, 0xEE },
			Mac = new byte[] { 0xAD, 0x1B, 0x4C, 0xEF, 0x8F, 0xF0, 0x68, 0xC7, 0x52, 0x6F, 0xD4, 0x82, 0x9C, 0x59, 0xD3, 0x87 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0x2, 0x3E, 0xD7, 0x11, 0x7D, 0x5E, 0x0, 0x3D, 0x4D, 0x3A, 0xCA, 0x5, 0xC1, 0xB1, 0x26, 0xE6, 0x7A, 0xB3, 0xDA, 0xE3, 0x7D, 0x0, 0x2F, 0x6C },
			Data = new byte[] { 0x87, 0x32, 0xEA, 0x84, 0xA1, 0xFE, 0x7E, 0x23, 0xF3, 0xB7, 0x80, 0xD9, 0xDD, 0x13, 0x5B, 0xB5, 0x44, 0x32, 0x45, 0x65, 0x2A, 0xDC, 0x72, 0x9E, 0x82, 0xB, 0x87, 0xBF, 0x42, 0xA9, 0x51, 0xB1, 0xB9, 0x9A, 0xB7, 0x11, 0x23, 0xFD, 0xED, 0x91, 0x7B, 0xAF, 0xEB, 0x9B, 0x90, 0x11, 0x1E, 0x38, 0x5B, 0xC, 0x5D, 0x31, 0x90, 0x52, 0x1E, 0x74 },
			Mac = new byte[] { 0x96, 0x44, 0x33, 0x3A, 0xE5, 0x6B, 0x9D, 0x32, 0xC4, 0xE4, 0x49, 0xCD, 0xCD, 0xED, 0x46, 0xF3 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0x73, 0xE6, 0xEA, 0xB8, 0xED, 0xDE, 0xE, 0x64, 0xDF, 0x68, 0x94, 0xAD, 0xB6, 0xB, 0x71, 0xFF, 0x40, 0x2F, 0x0, 0x9F, 0xBE, 0xE0, 0xAF, 0x8E },
			Data = new byte[] { 0x3A, 0xCF, 0xF9, 0xB0, 0x1A, 0x99, 0x94, 0x2D, 0xF6, 0x4C, 0xEB, 0x18, 0xA7, 0x28, 0xCE, 0x4F, 0xA0, 0xA2, 0x68, 0xA2, 0x82, 0xAF, 0x72, 0x37, 0xEA, 0x3E, 0xA7, 0x2C, 0x8D, 0x6, 0x78, 0x7F, 0x88, 0x83, 0x0, 0x2B, 0xF1, 0x3B, 0x3A, 0x94, 0xB2, 0x46, 0x72, 0x25, 0x97, 0xD, 0xF9, 0x38, 0xA5, 0x52, 0x1D, 0x36, 0xAE, 0x71, 0x58, 0xFF, 0x22, 0xE5, 0xC8, 0x8C, 0x28, 0xD, 0xDF, 0xD3 },
			Mac = new byte[] { 0x2A, 0xE1, 0xBA, 0xBA, 0x33, 0x13, 0x9A, 0xA8, 0xC4, 0x17, 0x82, 0x78, 0xD4, 0x22, 0x56, 0x38 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0xED, 0x30, 0x5C, 0xEA, 0x3C, 0xC0, 0x7A, 0x70, 0x50, 0xDB, 0x67, 0x29, 0xE6, 0x17, 0xF7, 0xE8, 0x96, 0x7F, 0x9A, 0xB2, 0x62, 0xD9, 0x8C, 0x20 },
			Data = new byte[] { 0x90, 0x2B, 0x4B, 0x5, 0xB5, 0x7D, 0x4E, 0x51, 0x13, 0xDF, 0xF4, 0x35, 0x24, 0xAE, 0xBB, 0x88, 0x77, 0x14, 0xB2, 0x6A, 0xBB, 0xCE, 0x31, 0x27, 0x1A, 0x32, 0xC7, 0x5E, 0xC8, 0x70, 0x74, 0x62, 0xDB, 0x18, 0x18, 0xE0, 0x5D, 0xDC, 0x2C, 0xC2, 0x9F, 0x98, 0xB0, 0x54, 0xD1, 0x8F, 0x64, 0xA5, 0xD0, 0xF7, 0x3B, 0x31, 0x3F, 0xB9, 0xD, 0xBC, 0xD9, 0x72, 0x8C, 0x81, 0x5, 0xBD, 0x79, 0x8C, 0xAB, 0xB4, 0x18, 0x65, 0x47, 0xB4, 0xE1, 0xEE },
			Mac = new byte[] { 0xF6, 0x9A, 0xAC, 0x6A, 0xDD, 0xD3, 0x63, 0x22, 0xC0, 0x13, 0x8E, 0x2, 0x3F, 0xBD, 0x27, 0x0 },
		}
	};
		private readonly TestVectorMac[] lea128CMacTestVectors =
		{
		new TestVectorMac
		{
			Key = new byte[] { 0xE0, 0x8A, 0xC1, 0x6C, 0xA6, 0xB1, 0x14, 0x51, 0x9D, 0x22, 0x3, 0x4, 0x43, 0x2F, 0x21, 0x1A },
			Data = Array.Empty<byte>(),
			Mac = new byte[] { 0x58, 0xA6, 0x54, 0xDD, 0x83, 0x44, 0x5D, 0x4A, 0x34, 0x2B, 0x61, 0x9D, 0x1B, 0xC3, 0x33, 0xC0 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0xEF, 0xA3, 0x9E, 0x57, 0x63, 0x6, 0x75, 0x14, 0xA4, 0x1C, 0xE6, 0xE3, 0xA, 0xAF, 0x27, 0x76 },
			Data = new byte[] { 0x93, 0x8E, 0x57, 0xBD, 0x7C, 0xD6, 0xB3, 0x4F },
			Mac = new byte[] { 0x74, 0x4, 0x4D, 0xD5, 0x92, 0x82, 0xCC, 0x5D, 0x22, 0xBB, 0x56, 0x1D, 0x59, 0xE, 0x7B, 0xCD },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0x13, 0x70, 0xC, 0xB, 0xC7, 0xDB, 0x79, 0xFF, 0x81, 0x2C, 0x49, 0x89, 0x37, 0x53, 0x3B, 0xBB },
			Data = new byte[] { 0xBE, 0x9F, 0xF2, 0x4, 0xDF, 0x85, 0xA3, 0xD, 0xAE, 0x9D, 0x11, 0xE2, 0x17, 0xED, 0xBB, 0x52 },
			Mac = new byte[] { 0xBD, 0xD, 0x6B, 0x43, 0xB0, 0xDA, 0xFC, 0x3, 0x44, 0xAC, 0xE6, 0xEE, 0x12, 0xDB, 0x3F, 0x5C },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0xBA, 0x6A, 0x53, 0x98, 0xF9, 0xBC, 0x73, 0x3B, 0x4E, 0x42, 0x8C, 0x32, 0xE2, 0x56, 0x1F, 0x4C },
			Data = new byte[] { 0x5C, 0xD2, 0x2F, 0xCF, 0xF7, 0xD2, 0xF6, 0x5F, 0xD8, 0xBC, 0xD7, 0x22, 0x9E, 0x7E, 0x94, 0x22, 0x3A, 0x17, 0xC1, 0xF3, 0x1, 0x59, 0x78, 0x95 },
			Mac = new byte[] { 0x5B, 0x96, 0xD3, 0xB0, 0xC6, 0x11, 0x2A, 0xF7, 0xD4, 0xDA, 0xD4, 0x29, 0xB5, 0x44, 0x4E, 0x26 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0xFF, 0xED, 0x4F, 0x9B, 0x8F, 0x97, 0x87, 0x8D, 0x29, 0xBB, 0x86, 0x8C, 0x7A, 0x21, 0x87, 0x34 },
			Data = new byte[] { 0xBA, 0xF5, 0x91, 0xC7, 0x3A, 0x12, 0xA5, 0x87, 0x3C, 0x80, 0x3C, 0x63, 0x8, 0x3A, 0xF1, 0xD6, 0x3C, 0x35, 0x7A, 0xD, 0x64, 0x9F, 0xDC, 0x48, 0xCA, 0x64, 0xDF, 0x82, 0x90, 0xF7, 0xC0, 0x54 },
			Mac = new byte[] { 0x43, 0x15, 0x6D, 0xD7, 0x86, 0x74, 0xA3, 0x34, 0x13, 0x7A, 0x36, 0x71, 0xEE, 0xCA, 0x60, 0xE },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0xFB, 0x4F, 0x27, 0x17, 0x12, 0x30, 0x58, 0x49, 0x68, 0xAB, 0xAD, 0x31, 0x36, 0xE8, 0x44, 0xC6 },
			Data = new byte[] { 0xAC, 0x23, 0xF5, 0xCE, 0x89, 0xF5, 0x87, 0x43, 0xEA, 0xD5, 0x23, 0xFA, 0x5F, 0xDE, 0x8, 0x87, 0x44, 0xD3, 0x81, 0x5B, 0x4F, 0x60, 0x14, 0x2F, 0x65, 0xA2, 0xFD, 0xA6, 0xB2, 0xEA, 0xDB, 0x2D, 0xF8, 0xBE, 0xA8, 0x26, 0x27, 0x21, 0xEE, 0x47 },
			Mac = new byte[] { 0x1F, 0xB2, 0x54, 0xD7, 0x30, 0x3E, 0xEC, 0xEA, 0x2E, 0x3F, 0xD9, 0x57, 0x76, 0x3B, 0xEA, 0x35 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0x2F, 0x15, 0x38, 0x3C, 0x12, 0x5D, 0xC7, 0x94, 0x3D, 0x87, 0x87, 0xDA, 0x18, 0x2A, 0x42, 0x2 },
			Data = new byte[] { 0xDC, 0x6D, 0x12, 0x8, 0xA5, 0xC8, 0x1C, 0xD3, 0xC8, 0xF, 0x7B, 0x5F, 0x66, 0xAC, 0x7B, 0x1B, 0x41, 0x2B, 0x8, 0x90, 0xCF, 0xFD, 0x66, 0x44, 0x8D, 0x75, 0x22, 0xDE, 0x96, 0x17, 0x48, 0x8A, 0x74, 0x12, 0xD6, 0x9F, 0x36, 0xB, 0x71, 0x80, 0xC2, 0x1C, 0x57, 0xC0, 0x6D, 0x1D, 0x95, 0x89 },
			Mac = new byte[] { 0xBA, 0xE5, 0x13, 0x1F, 0x61, 0xE0, 0x5, 0x8B, 0x63, 0x7C, 0x7E, 0x8B, 0x54, 0xD7, 0xB6, 0x6 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0xC9, 0x22, 0x7A, 0x3E, 0xBE, 0x44, 0x4B, 0x5F, 0xDD, 0xA5, 0x38, 0xAD, 0xF0, 0xAE, 0x8F, 0x8F },
			Data = new byte[] { 0xD6, 0x9B, 0x30, 0xB5, 0x8E, 0x3A, 0x41, 0xFB, 0x91, 0xEF, 0x22, 0x90, 0x65, 0xFC, 0xA3, 0x57, 0x6F, 0xFF, 0x75, 0x8D, 0x9, 0xBC, 0xDF, 0xAD, 0xD4, 0x1D, 0xB2, 0x90, 0x4F, 0x77, 0x7F, 0xD9, 0xA9, 0xF, 0x7, 0x90, 0xD4, 0xDD, 0xF3, 0xD, 0xDB, 0x90, 0xC6, 0x18, 0x75, 0xD2, 0xF, 0x4E, 0xDA, 0xCC, 0xE3, 0xC7, 0xD5, 0xED, 0x8A, 0xF5 },
			Mac = new byte[] { 0x25, 0x46, 0x7C, 0x84, 0x10, 0xF6, 0xF9, 0xB2, 0x98, 0x88, 0xB1, 0xEE, 0x92, 0xA7, 0x57, 0xC4 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0x1B, 0xE7, 0x79, 0xCF, 0xDB, 0xFB, 0x80, 0x2F, 0x96, 0x77, 0x45, 0x79, 0x31, 0x7D, 0xF1, 0x7E },
			Data = new byte[] { 0x49, 0x5, 0x29, 0xA0, 0xC6, 0x25, 0x40, 0x36, 0xB3, 0x91, 0xAB, 0x32, 0x4D, 0x5E, 0xB5, 0x1, 0x59, 0xB, 0x74, 0xB2, 0xBB, 0xC1, 0xFB, 0x5B, 0x45, 0xDA, 0xD1, 0xB8, 0xCD, 0xA1, 0xA2, 0x16, 0x82, 0x58, 0x35, 0x6F, 0x80, 0x80, 0x9E, 0xD7, 0xA1, 0x54, 0xB5, 0x16, 0x96, 0x97, 0xC6, 0x97, 0x37, 0x8F, 0x8A, 0x81, 0x18, 0x52, 0x56, 0x23, 0x5D, 0x40, 0x93, 0x95, 0xCF, 0xD1, 0x6E, 0x9C },
			Mac = new byte[] { 0x15, 0x8B, 0x4F, 0xA5, 0xAA, 0x68, 0x15, 0x2B, 0xF1, 0x1, 0xFB, 0xB3, 0x4, 0x8A, 0x7E, 0x16 },
		},
		new TestVectorMac
		{
			Key = new byte[] { 0x2F, 0x91, 0xD0, 0xCF, 0xCA, 0x68, 0x91, 0xF8, 0x4D, 0x1F, 0xE9, 0xBD, 0xDB, 0x20, 0x27, 0x80 },
			Data = new byte[] { 0x5D, 0x7D, 0xA5, 0x83, 0x19, 0x34, 0xFB, 0x50, 0x87, 0xB2, 0x73, 0x58, 0x5F, 0x95, 0xBD, 0xDA, 0xF7, 0xB6, 0xE4, 0x6, 0xCC, 0x67, 0x81, 0x63, 0x5E, 0xF9, 0x2F, 0x6E, 0x42, 0x82, 0x3E, 0x84, 0x72, 0xDC, 0xAC, 0x1, 0xE7, 0xF1, 0x50, 0xAA, 0x6A, 0x36, 0x59, 0x48, 0xA7, 0x76, 0xF7, 0x96, 0x83, 0xD1, 0x58, 0x5D, 0xAF, 0x4, 0xD6, 0xDE, 0x7D, 0xEB, 0x6F, 0x70, 0xF3, 0x44, 0x75, 0x6A, 0x1F, 0xB5, 0x86, 0x43, 0xA9, 0x11, 0xBF, 0xF8 },
			Mac = new byte[] { 0xB1, 0xAF, 0x8A, 0x38, 0x7A, 0x59, 0x24, 0xF2, 0x30, 0xA6, 0xDB, 0xEB, 0xFC, 0x6, 0x42, 0x52 },
		}
	};

		[Fact]
		public void LEA256_CMAC_AllTestVectorsPassing()
		{
			// Arrange
			var cipher = new Symmetric.LEA.CMac();

			for (var i = 0; i < lea256CMacTestVectors.Length; i++)
			{
				var testvector = lea256CMacTestVectors[i];
				// Act
				cipher.Init(testvector.Key);
				ReadOnlySpan<byte> actual = cipher.DoFinal(testvector.Data);
				cipher.Reset();

				// Assert
				Assert.True(actual.SequenceEqual(testvector.Mac), "LEA-256-CMAC test case #" + (i + 1));
			}
		}

		[Fact]
		public void LEA192_CMAC_AllTestVectorsPassing()
		{
			// Arrange
			var cipher = new Symmetric.LEA.CMac();

			for (var i = 0; i < lea192CMacTestVectors.Length; i++)
			{
				var testvector = lea192CMacTestVectors[i];

				// Act
				cipher.Init(testvector.Key);
				ReadOnlySpan<byte> actual = cipher.DoFinal(testvector.Data);
				cipher.Reset();

				// Assert
				Assert.True(actual.SequenceEqual(testvector.Mac), "LEA-192-CMAC test case #" + (i + 1));
			}
		}

		[Fact]
		public void LEA128_CMAC_AllTestVectorsPassing()
		{
			// Arrange
			var cipher = new Symmetric.LEA.CMac();

			for (var i = 0; i < lea128CMacTestVectors.Length; i++)
			{
				var testvector = lea128CMacTestVectors[i];

				// Act
				cipher.Init(testvector.Key);
				ReadOnlySpan<byte> actual = cipher.DoFinal(testvector.Data);
				cipher.Reset();

				// Assert
				Assert.True(actual.SequenceEqual(testvector.Mac), "LEA-128-CMAC test case #" + (i + 1));
			}
		}
	}
}